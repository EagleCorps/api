version: "3.6"
services:
  postgres:
    image: postgres:15
    container_name: eaglecorps-postgres
    command: postgres -c jit=off
    restart: always
    volumes:
      - eaglecorps_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword

  pgweb:
    container_name: eaglecorps-pgweb
    restart: always
    image: sosedoff/pgweb
    ports:
      - "8082:8081"
    links:
      - postgres:postgres
    environment:
      - PGWEB_DATABASE_URL=postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable
    depends_on:
      - postgres

  graphql-engine:
    image: hasura/graphql-engine:v2.35.1.cli-migrations-v3
    container_name: eaglecorps-graphql-engine
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - ./migrations:/hasura-migrations
      - ./metadata:/hasura-metadata
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: "Candles1"
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "naming_convention"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: false
      HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "http://app:3000/api/.well-known/jwks.json"}'
      HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION: "graphql-default"
    depends_on:
      data-connector-agent:
        condition: service_healthy
      app:
        condition: service_healthy

  data-connector-agent:
    image: hasura/graphql-data-connector:v2.33.0
    container_name: eaglecorps-data-connector-agent
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: false
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      HASURA_GRAPHQL_ENABLE_TELEMETRY: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

  hasura-console:
    image: hasura/graphql-engine:v2.33.0.cli-migrations-v3
    container_name: eaglecorps-hasura-console
    volumes:
      - .:/app
    restart: always
    healthcheck:
      test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/9695' || exit 1
    working_dir: /app
    command: hasura-cli console
      --no-browser
      --endpoint http://graphql-engine:8080
      --admin-secret Candles1
      --address 0.0.0.0
      --console-port 9695
      --api-port 9693
      --console-hge-endpoint http://localhost:8080
    ports:
      - "9695:9695"
      - "9693:9693"
    depends_on:
      graphql-engine:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_TELEMETRY: false

  object-store:
    image: minio/minio:latest
    container_name: eaglecorps-object-store
    restart: always
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - eaglecorps_user_files:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: Candles1

  bucket-creator:
    container_name: eaglecorps-bucket-creator
    image: minio/mc
    depends_on:
      - object-store
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc config host add objectstore http://object-store:9000 minio Candles1;
        /usr/bin/mc mb --ignore-existing objectstore/user-data;
        /usr/bin/mc anonymous set download objectstore/user-data;
        exit 0;
      "

  file-uploader:
    image: tusproject/tusd:v2
    container_name: eaglecorps-file-uploader
    restart: always
    command: -verbose -s3-bucket user-data -s3-endpoint http://object-store:9000 -port 9002
    ports:
      - "9002:9002"
    volumes:
      - eaglecorps_user_files:/data
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=Candles1

  app:
    build:
      context: ../social-app
      dockerfile: Dockerfile
    container_name: eaglecorps-app
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ../social-app/src:/app/src
    develop:
      watch:
        - action: rebuild
          path: ../social-app/package.json
          target: /app/package.json
        - action: rebuild
          path: ../social-app/package-lock.json
          target: /app/package-lock.json
        - action: rebuild
          path: ../social-app/next.config.mjs
          target: /app/next.config.mjs
        - action: rebuild
          path: ../social-app/tsconfig.json
          target: /app/tsconfig.json

volumes:
  eaglecorps_db_data:
  eaglecorps_user_files:
